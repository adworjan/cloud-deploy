---
- name: Provision AWS Instances
  hosts: localhost
  gather_facts: no
  vars_files:
    - ./vars/default-vars.yml
    - ./credentials/tower_creds.yml

  tasks:

    - name: Create AWS SSH Key Pair
      ec2_key:
        region: "{{ ec2_region }}"
        name: "{{ ec2_prefix }}-key"
      register: create_key

    # This is just saving off the private key, this can only be done 1 time on the first creation of the key, pair
    - name: Save Private Key Locally
      copy:
        content: "{{ create_key.key.private_key }}"
        dest: "{{ working_dir }}/{{ ec2_prefix }}-key-private.pem"
        mode: '0400'
      when: create_key.changed
      become: yes

    - name: Update Ansible Tower AWS SSH Credential
      tower_credential:
        name: AWS Demo Instances Key
        organization: Default
        tower_host: "{{ tower_url }}"
        tower_username: "{{ tower_user }}"
        tower_password: "{{ tower_pass }}"
        kind: ssh
        username: centos
        ssh_key_data: "{{ working_dir }}/{{ ec2_prefix }}-key-private.pem"
        tower_verify_ssl: false
      delegate_to: localhost
      run_once: true
      when: create_key.changed

    # - name: delete flat-file private key
    #   file:
    #     path: "{{ working_dir }}/{{ ec2_prefix }}-key-private.pem"
    #     state: absent

    - name: Gather Subnet Information
      ec2_vpc_subnet_info:
        region: "{{ ec2_region }}"
        filters:
          "tag:application": "{{ application }}"
          "tag:provisioner": "mford"
      register: subnet_info

    # - debug:
    #     var: subnet_info

    - name: "Create EC2 instances for {{ application }}"
      ec2:
        assign_public_ip: true
        key_name: "{{ ec2_prefix }}-key"
        group: "{{ ec2_prefix }}-sg"
        instance_type: "{{ machine_type }}"
        image: "{{ centos_image_id }}"
        region: "{{ ec2_region }}"
        count: "{{ num_instances }}"
        wait: "{{ ec2_wait }}"
        vpc_subnet_id: "{{ subnet_info.subnets[0].id }}"
        instance_tags:
          provisioner: mford
          application: "{{ application }}"
          Name: "{{ application }}-server"
          demo: appdeployment
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 10
            delete_on_termination: true

    - pause:
        seconds: 60
